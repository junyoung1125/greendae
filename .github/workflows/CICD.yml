# 작성자: id3ntity99(이현민)
# 내용  : github actions & docker를 이용한 CI/CD
name: Green University Server CI/CD with Gradle & docker

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    env:
      AWS_INSTANCE_SG_ID: sg-04704689baf3253a7
    permissions:
      contents: read
    defaults:
      run:
        working-directory: ./GreenUniv

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Change Permission for gradlew
        run: chmod +x ./gradlew

      - name: Gradle Build
        run: ./gradlew clean build

      - name: Docker build & push to Docker Hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/greenuniv-server .
          docker push ${{ secrets.DOCKER_USERNAME }}/greenuniv-server

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_PRIVATE_KEY }}
          aws-region: ap-northeast-2
      - name: get runner ip address
        id: ip
        uses: haythem/public-ip@v1.2
      - name: whitelist runner ip address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: SSH into EC2 and deploy Docker container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          port: 22
          script: |
            sudo docker ps
            sudo docker network ls | grep green-univ || sudo docker network create green-univ
            sudo docker volume ls | grep green-univ || sudo docker volume create green-univ
            sudo docker stop greenuniv-server || true && sudo docker rm greenuniv-server || true
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/greenuniv-server
            sudo docker run -d --name greenuniv-server --network green-univ -v green-univ:/data -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/greenuniv-server
            sudo docker image prune -f
          
      - name: revoke runner ip address
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
